(function(){const o=document.createElement("link").relList;if(o&&o.supports&&o.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))a(e);new MutationObserver(e=>{for(const t of e)if(t.type==="childList")for(const s of t.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&a(s)}).observe(document,{childList:!0,subtree:!0});function r(e){const t={};return e.integrity&&(t.integrity=e.integrity),e.referrerPolicy&&(t.referrerPolicy=e.referrerPolicy),e.crossOrigin==="use-credentials"?t.credentials="include":e.crossOrigin==="anonymous"?t.credentials="omit":t.credentials="same-origin",t}function a(e){if(e.ep)return;e.ep=!0;const t=r(e);fetch(e.href,t)}})();const H="SensorMonitorDB",N=1,M="humidityUpdates",T="phUpdates";let u;function P(){return new Promise((n,o)=>{const r=indexedDB.open(H,N);r.onerror=a=>{console.error("Error opening IndexedDB:",a.target.errorCode),o(a.target.errorCode)},r.onsuccess=a=>{u=a.target.result,console.log("IndexedDB opened successfully"),n(u)},r.onupgradeneeded=a=>{const e=a.target.result;if(!e.objectStoreNames.contains("STORE_NAME_2")){const t=e.createObjectStore("STORE_NAME_2",{keyPath:"id",autoIncrement:!0});t.createIndex("timestampCloudReceived","timestampCloudReceived",{unique:!1}),t.createIndex("timestampBrowserReceived","timestampBrowserReceived",{unique:!1}),console.log("Object store 'phUpdates' created.")}if(!e.objectStoreNames.contains("STORE_NAME_1")){const t=e.createObjectStore("STORE_NAME_1",{keyPath:"id",autoIncrement:!0});t.createIndex("timestampCloudReceived","timestampCloudReceived",{unique:!1}),t.createIndex("timestampBrowserReceived","timestampBrowserReceived",{unique:!1}),console.log("Object store 'humidityUpdates' created.")}}})}function _(n){if(!u){console.warn("IndexedDB not open. Cannot save pH data.");return}const a=u.transaction(["STORE_NAME_2"],"readwrite").objectStore("STORE_NAME_2").add(n);a.onsuccess=()=>{},a.onerror=e=>{console.error("Error saving pH data to IndexedDB:",e.target.errorCode)}}function q(n){if(!u){console.warn("IndexedDB not open. Cannot save humidity data.");return}const a=u.transaction(["STORE_NAME_1"],"readwrite").objectStore("STORE_NAME_1").add(n);a.onsuccess=()=>{},a.onerror=e=>{console.error("Error saving humidity data to IndexedDB:",e.target.errorCode)}}function F(n=10){return new Promise((o,r)=>{if(!u){console.warn("IndexedDB not open. Cannot get data."),o([]);return}const t=u.transaction([M],"readonly").objectStore(M).openCursor(null,"prev"),s=[];t.onsuccess=c=>{const i=c.target.result;i&&s.length<n?(s.push(i.value),i.continue()):o(s)},t.onerror=c=>{console.error("Error getting data from IndexedDB:",c.target.errorCode),r(c.target.errorCode)}})}function j(n=10){return new Promise((o,r)=>{if(!u){console.warn("IndexedDB not open. Cannot get data."),o([]);return}const t=u.transaction([T],"readonly").objectStore(T).openCursor(null,"prev"),s=[];t.onsuccess=c=>{const i=c.target.result;i&&s.length<n?(s.push(i.value),i.continue()):o(s)},t.onerror=c=>{console.error("Error getting data from IndexedDB:",c.target.errorCode),r(c.target.errorCode)}})}const $="a2spluztzgsdhl-ats.iot.ap-southeast-1.amazonaws.com",x="ap-southeast-1",U="ap-southeast-1:e9f502ea-58c5-459a-bfa3-3ce6e1fc9bff";AWS.config.region=x;AWS.config.credentials=new AWS.CognitoIdentityCredentials({IdentityPoolId:U});let y;const z=async()=>{try{await new Promise((o,r)=>{AWS.config.credentials.get(a=>{a?r(a):o()})}),console.log("✅ Cognito Credentials loaded.");const n=V.getSignedUrl($,x,AWS.config.credentials.accessKeyId,AWS.config.credentials.secretAccessKey,AWS.config.credentials.sessionToken);y=mqtt.connect(n,{reconnectPeriod:5e3,clientId:"webclient_"+Math.floor(Math.random()*1e4),protocol:"wss",clean:!0}),y.on("connect",()=>{console.log("✅ MQTT connected")}),y.on("error",o=>{console.error("❌ MQTT Error:",o)})}catch(n){console.error("❌ Gagal load Cognito credentials:",n)}};window.nyalakanPompa=()=>{if(!y||!y.connected){console.error("🚫 MQTT belum terkoneksi. Tidak bisa publish.");return}const n=moment().format("YYYY-MM-DD HH:mm:ss"),o=document.getElementById("flushButton");o.classList.add("opacity-80"),o.disabled=!0,o.textContent="Sending ...",setTimeout(()=>{o.textContent="Flushing ..."},2e3),setTimeout(()=>{o.classList.remove("opacity-80"),o.disabled=!1,o.textContent="Flush"},3e4);const r=JSON.stringify({action:"nyala"});y.publish("device/pompa",r,{qos:1},a=>{a?console.error("🚫 Publish error:",a):console.log("📤 Pompa nyala command dikirim pada",n)})};const V={getSignedUrl:function(n,o,r,a,e){const t=new Date,s=t.toISOString().slice(0,10).replace(/-/g,""),c=t.toISOString().replace(/[:-]|\.\d{3}/g,""),i="iotdevicegateway",l="AWS4-HMAC-SHA256",m="GET",d="/mqtt",g=s+"/"+o+"/"+i+"/aws4_request",h="X-Amz-Algorithm="+l+"&X-Amz-Credential="+encodeURIComponent(r+"/"+g)+"&X-Amz-Date="+c+"&X-Amz-SignedHeaders=host",b="host:"+n+`
`,w=AWS.util.crypto.sha256("","hex"),C=m+`
`+d+`
`+h+`
`+b+`
host
`+w,E=l+`
`+c+`
`+g+`
`+AWS.util.crypto.sha256(C,"hex"),v=AWS.util.crypto.hmac(AWS.util.crypto.hmac(AWS.util.crypto.hmac(AWS.util.crypto.hmac("AWS4"+a,s,"buffer"),o,"buffer"),i,"buffer"),"aws4_request","buffer"),k=AWS.util.crypto.hmac(v,E,"hex");let R="wss://"+n+d+"?"+h+"&X-Amz-Signature="+k;return e&&(R+="&X-Amz-Security-Token="+encodeURIComponent(e)),R}};let p;const L=()=>{if(p&&p.readyState!==WebSocket.CLOSED&&p.readyState!==WebSocket.CLOSING){console.log("WebSocket sudah aktif. Tidak membuat koneksi baru.");return}const n="wss://chili-monitor.andzuru.space";p=new WebSocket(n),p.onopen=()=>{console.log("✅ WebSocket connected to",n)},p.onmessage=o=>{try{const r=JSON.parse(o.data);console.log("📨 Data diterima:",r);const{topic:a,data:e,chartData:t,timestamp:s}=r;phDataReceivedAt=t.ph.timestamps[t.ph.timestamps.length-1],humidityDataReceivedAt=t.humidity.timestamps[t.humidity.timestamps.length-1];const c=new Date(Date.now()+7*60*60*1e3),i=c-Number(s),l={timestampCloudReceived:s,timestampBrowserReceived:c,latency:parseFloat(i),humidityValue:parseFloat((e==null?void 0:e.Kelembapan)??null),humidityDataReceivedAt},m={timestampCloudReceived:s,timestampBrowserReceived:c,latency:parseFloat(i),phValue:parseFloat((e==null?void 0:e.Ph)??null),phDataReceivedAt};q(l),_(m);const d=parseFloat((e==null?void 0:e.Ph)??null),g=parseFloat((e==null?void 0:e.Kelembapan)??null),h=!isNaN(d)&&typeof d=="number"?d.toFixed(2):"N/A",b=!isNaN(g)&&typeof g=="number"?g.toFixed(2):"N/A",w=document.getElementById("phValue"),C=document.getElementById("humidityValue"),E=document.getElementById("ground-good-status"),v=document.getElementById("ground-poor-status");h>8.5||h<5.5||b>90||b<10?(E.classList.add("hidden"),v.classList.remove("hidden")):(v.classList.add("hidden"),E.classList.remove("hidden")),w&&(w.textContent=h),C&&(C.textContent=b),t&&(setTimeout(K(),200),setTimeout(G(),200))}catch(r){console.error("❌ Error parsing WebSocket message:",r)}},p.onerror=o=>{console.error("⚠️ WebSocket error:",o)},p.onclose=o=>{console.warn(`⚠️ WebSocket disconnected. Code: ${o.code}, Reason: ${o.reason}`),setTimeout(()=>{console.log("🔁 Mencoba reconnect WebSocket..."),L()},5e3)}};document.addEventListener("DOMContentLoaded",()=>{L(),z(),P().then(()=>{}).catch(n=>console.error("Failed to open IndexedDB:",n))});async function K(){const n=await j(20);if(!n||n.length===0){S.data.datasets[0].data=[],S.data.labels=[],S.update();return}const o=n.slice().reverse(),r=o.map(e=>{const t=new Date(e.phDataReceivedAt),s=t.getFullYear(),c=String(t.getMonth()+1).padStart(2,"0"),i=String(t.getDate()).padStart(2,"0"),l=String(t.getHours()).padStart(2,"0"),m=String(t.getMinutes()).padStart(2,"0"),d=String(t.getSeconds()).padStart(2,"0");return`${s}-${c}-${i} ${l}:${m}:${d}`}),a=o.map(e=>e.phValue);S.data.datasets[0].data=a,S.data.labels=r,S.update()}const X={labels:[],datasets:[{label:"Soil pH",data:[],borderColor:"rgba(75, 192, 192, 1)",backgroundColor:"rgba(75, 192, 192, 0.2)",borderWidth:2}]},Y={type:"bar",data:X,options:{scales:{y:{beginAtZero:!0}}}},S=new Chart(document.getElementById("myChart1"),Y);async function G(){const n=await F(20);if(!n||n.length===0){f.data.datasets[0].data=[],f.data.labels=[],f.update();return}const o=n.slice().reverse(),r=o.map(e=>{const t=new Date(e.humidityDataReceivedAt),s=t.getFullYear(),c=String(t.getMonth()+1).padStart(2,"0"),i=String(t.getDate()).padStart(2,"0"),l=String(t.getHours()).padStart(2,"0"),m=String(t.getMinutes()).padStart(2,"0"),d=String(t.getSeconds()).padStart(2,"0");return`${s}-${c}-${i} ${l}:${m}:${d}`}),a=o.map(e=>e.phValue);f.data.datasets[0].data=a,f.data.labels=r,f.update()}const Q={labels:[],datasets:[{label:"Soil Moisture",data:[],borderColor:"rgba(54, 162, 235, 1)",backgroundColor:"rgba(54, 162, 235, 0.2)",borderWidth:2}]},J={type:"bar",data:Q,options:{scales:{y:{beginAtZero:!0}}}},f=new Chart(document.getElementById("myChart"),J),A=document.querySelector("#hamburger"),I=document.querySelector("#nav-menu");A.addEventListener("click",function(){A.classList.toggle("hamburger-active"),I.classList.toggle("hidden")});window.addEventListener("click",function(n){n.target!=A&&n.target!=I&&(A.classList.remove("hamburger-active"),I.classList.add("hidden"))});const D=document.getElementById("modal-container-1"),B=document.getElementById("modal-container-2"),Z=document.getElementById("modal-main"),O=document.getElementById("info-button"),ee=document.getElementById("close-modal");O.addEventListener("click",()=>{D.classList.remove("hidden"),B.classList.remove("hidden")});ee.addEventListener("click",()=>{D.classList.add("hidden"),B.classList.add("hidden")});window.addEventListener("click",function(n){!Z.contains(n.target)&&!O.contains(n.target)&&(D.classList.add("hidden"),B.classList.add("hidden"))});function W(){const n=moment(),o=n.hour(),r=n.minute(),a=n.second(),e=n.format("HH : mm : ss");document.getElementById("clock").textContent=e;let t;o<7||o===7&&r===0&&a===0?t=moment().hour(7).minute(0).second(0):t=moment().add(1,"days").hour(7).minute(0).second(0),o===7&&r===0&&a===0&&nyalakanPompa();const s=moment.duration(t.diff(n)),c=String(s.hours()).padStart(2,"0"),i=String(s.minutes()).padStart(2,"0"),l=String(s.seconds()).padStart(2,"0"),m=`${c}`,d=`${i}`,g=`${l}`;document.getElementById("countdownHour").textContent=m,document.getElementById("countdownMinute").textContent=d,document.getElementById("countdownSecond").textContent=g}setInterval(W,1e3);W();
